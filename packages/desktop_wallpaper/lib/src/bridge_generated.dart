// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.78.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart' if (dart.library.html) 'bridge_generated.web.dart';

abstract class DesktopWallpaper {
  Future<String> getWallpaper({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetWallpaperConstMeta;

  Future<void> setWallpaper({required String path, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetWallpaperConstMeta;

  Future<void> setMode({required WallpaperMode mode, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetModeConstMeta;
}

enum WallpaperMode {
  Center,
  Crop,
  Fit,
  Span,
  Stretch,
  Tile,
}

class DesktopWallpaperImpl implements DesktopWallpaper {
  final DesktopWallpaperPlatform _platform;
  factory DesktopWallpaperImpl(ExternalLibrary dylib) => DesktopWallpaperImpl.raw(DesktopWallpaperPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory DesktopWallpaperImpl.wasm(FutureOr<WasmModule> module) => DesktopWallpaperImpl(module as ExternalLibrary);
  DesktopWallpaperImpl.raw(this._platform);
  Future<String> getWallpaper({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_wallpaper(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kGetWallpaperConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetWallpaperConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_wallpaper",
        argNames: [],
      );

  Future<void> setWallpaper({required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_wallpaper(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetWallpaperConstMeta,
      argValues: [
        path
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetWallpaperConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "set_wallpaper",
        argNames: [
          "path"
        ],
      );

  Future<void> setMode({required WallpaperMode mode, dynamic hint}) {
    var arg0 = api2wire_wallpaper_mode(mode);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_mode(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetModeConstMeta,
      argValues: [
        mode
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetModeConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "set_mode",
        argNames: [
          "mode"
        ],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_wallpaper_mode(WallpaperMode raw) {
  return api2wire_i32(raw.index);
}
// Section: finalizer
